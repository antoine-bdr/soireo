// src/app/features/events/my-events/my-events.page.ts
// Page "Mes √âv√©nements" - VERSION CORRIG√âE avec cycle de vie Ionic

import { Component, OnInit, OnDestroy, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { RouterLink } from '@angular/router';
import {
  IonHeader,
  IonToolbar,
  IonTitle,
  IonContent,
  IonSegment,
  IonSegmentButton,
  IonLabel,
  IonCard,
  IonCardHeader,
  IonCardTitle,
  IonCardSubtitle,
  IonCardContent,
  IonButton,
  IonIcon,
  IonChip,
  IonSpinner,
  IonText,
  IonRefresher,
  IonRefresherContent,
  IonButtons,
  IonBackButton,
  IonBadge,
  IonAvatar
} from '@ionic/angular/standalone';
import { addIcons } from 'ionicons';
import { 
  calendarOutline, 
  locationOutline, 
  peopleOutline,
  addOutline,
  rocketOutline,
  personOutline
} from 'ionicons/icons';

import { EventsService } from '../../../core/services/events.service';
import { ParticipantsService } from '../../../core/services/participants.service';
import { AuthenticationService } from '../../../core/services/authentication.service';
import { Event, EventCategory } from '../../../core/models/event.model';
import { switchMap, map, take } from 'rxjs/operators';
import { of, Subscription } from 'rxjs';

@Component({
  selector: 'app-my-events',
  templateUrl: './my-events.page.html',
  styleUrls: ['./my-events.page.scss'],
  standalone: true,
  imports: [
    IonBadge, 
    CommonModule,
    IonHeader,
    IonToolbar,
    IonTitle,
    IonContent,
    IonSegment,
    IonSegmentButton,
    IonLabel,
    IonCard,
    IonCardHeader,
    IonCardTitle,
    IonCardSubtitle,
    IonCardContent,
    IonButton,
    IonIcon,
    IonChip,
    IonSpinner,
    IonText,
    IonRefresher,
    IonRefresherContent,
    IonButtons,
    IonBackButton,
    RouterLink,
    IonAvatar
  ]
})
export class MyEventsPage implements OnInit, OnDestroy {
  // Injection des services
  private readonly eventsService = inject(EventsService);
  private readonly participantsService = inject(ParticipantsService);
  private readonly authService = inject(AuthenticationService);
  private readonly router = inject(Router);

  // √âtat de la page
  selectedSegment = signal<'created' | 'joined'>('created');
  isLoading = signal(true);
  
  // Listes d'√©v√©nements
  createdEvents = signal<Event[]>([]);
  joinedEvents = signal<Event[]>([]);
  
  // Map pour les compteurs de participants
  participantCounts = new Map<string, number>();

  // üÜï GESTION DES SUBSCRIPTIONS POUR CLEANUP
  private subscriptions: Subscription[] = [];

  constructor() {
    addIcons({ 
      calendarOutline, 
      locationOutline, 
      peopleOutline,
      addOutline,
      rocketOutline,
      personOutline
    });
  }

  ngOnInit() {
    // ‚ö†Ô∏è ngOnInit n'est appel√© qu'UNE SEULE FOIS √† la cr√©ation de la page
    console.log('üîµ ngOnInit - Premi√®re initialisation de MyEventsPage');
    this.loadMyEvents();
  }

  // ========================================
  // üîÑ IONIC LIFECYCLE HOOKS (CRITIQUE !)
  // ========================================

  /**
   * üöÄ ionViewWillEnter : Appel√© √† CHAQUE fois que la page va appara√Ætre
   * 
   * C'est ici qu'on recharge les donn√©es pour avoir toujours les infos √† jour.
   * Ce hook est appel√© :
   * - √Ä la premi√®re visite de la page
   * - Quand on revient sur cette page depuis une autre page
   * - M√™me si la page est mise en cache par Ionic
   * 
   * ‚úÖ Solution au probl√®me : Les donn√©es sont recharg√©es √† chaque retour sur la page
   */
  ionViewWillEnter() {
    console.log('üü¢ ionViewWillEnter - La page va appara√Ætre, rechargement des donn√©es...');
    
    // üßπ Nettoie les anciennes subscriptions avant d'en cr√©er de nouvelles
    this.cleanupSubscriptions();
    
    // üîÑ Recharge toutes les donn√©es (√©v√©nements + participants)
    this.loadMyEvents();
  }

  /**
   * üö™ ionViewWillLeave : Appel√© quand l'utilisateur quitte la page
   * 
   * On nettoie les subscriptions pour √©viter les fuites m√©moire.
   * Les subscriptions continueraient d'√©couter Firestore sinon !
   */
  ionViewWillLeave() {
    console.log('üî¥ ionViewWillLeave - L\'utilisateur quitte la page, nettoyage...');
    this.cleanupSubscriptions();
  }

  /**
   * üßπ ngOnDestroy : Filet de s√©curit√© pour le cleanup final
   * 
   * Appel√© quand la page est d√©truite (rare en Ionic car mise en cache).
   * On garde ce hook pour √™tre s√ªr que tout est nettoy√©.
   */
  ngOnDestroy() {
    console.log('üóëÔ∏è ngOnDestroy - Destruction de MyEventsPage');
    this.cleanupSubscriptions();
  }

  // ========================================
  // üìä CHARGEMENT DES DONN√âES
  // ========================================

  /**
   * Charge les √©v√©nements de l'utilisateur (cr√©√©s + participations)
   * üÜï VERSION R√âACTIVE avec stockage des subscriptions
   */
  loadMyEvents() {
    this.isLoading.set(true);
    const userId = this.authService.getCurrentUserId();

    if (!userId) {
      console.error('‚ùå Utilisateur non connect√©');
      this.isLoading.set(false);
      return;
    }

    console.log('üì• Chargement des √©v√©nements pour userId:', userId);

    // üìä Charge les √©v√©nements cr√©√©s par l'utilisateur (temps r√©el)
    const createdSub = this.eventsService.getEventsByOrganizer(userId).subscribe({
      next: (events) => {
        this.createdEvents.set(events);
        this.loadParticipantCounts(events);
        console.log(`‚úÖ ${events.length} √©v√©nements cr√©√©s charg√©s`);
      },
      error: (error) => {
        console.error('‚ùå Erreur chargement √©v√©nements cr√©√©s:', error);
        this.isLoading.set(false);
      }
    });
    this.subscriptions.push(createdSub);

    // üìä Charge les √©v√©nements rejoints (temps r√©el avec switchMap)
    // üîß FIX : switchMap garantit qu'√† chaque changement de participations,
    // on r√©cup√®re la liste d'√©v√©nements √† jour et on la filtre
    const joinedSub = this.participantsService.getParticipationsByUser(userId).pipe(
      switchMap(participations => {
        console.log(`üìù ${participations.length} participations trouv√©es`);
        
        // Si aucune participation, retourne un tableau vide imm√©diatement
        if (participations.length === 0) {
          return of([]);
        }

        // R√©cup√®re les IDs des √©v√©nements
        const eventIds = participations.map(p => p.eventId);
        console.log(`üîç IDs des √©v√©nements rejoints:`, eventIds);
        
        // Pour chaque changement de participations, on r√©cup√®re TOUS les √©v√©nements
        // et on filtre pour ne garder que ceux o√π l'utilisateur participe
        return this.eventsService.getAllEvents().pipe(
          map(allEvents => {
            const joined = allEvents.filter(event => 
              eventIds.includes(event.id!) && 
              event.organizerId !== userId
            );
            console.log(`üéâ ${joined.length} √©v√©nements rejoints filtr√©s sur ${allEvents.length} √©v√©nements totaux`);
            return joined;
          })
        );
      })
    ).subscribe({
      next: (events) => {
        this.joinedEvents.set(events);
        this.loadParticipantCounts(events);
        this.isLoading.set(false);
        console.log(`‚úÖ ${events.length} √©v√©nements rejoints charg√©s`);
      },
      error: (error) => {
        console.error('‚ùå Erreur chargement √©v√©nements rejoints:', error);
        this.isLoading.set(false);
      }
    });
    this.subscriptions.push(joinedSub);
  }

  /**
   * Charge le nombre de participants pour chaque √©v√©nement (temps r√©el)
   * üÜï VERSION avec stockage des subscriptions
   */
  loadParticipantCounts(events: Event[]) {
    events.forEach(event => {
      if (event.id) {
        const countSub = this.participantsService.getParticipantCount(event.id).subscribe({
          next: (count) => {
            this.participantCounts.set(event.id!, count);
          },
          error: (error) => {
            console.error(`‚ùå Erreur compteur pour ${event.id}:`, error);
            this.participantCounts.set(event.id!, 0);
          }
        });
        this.subscriptions.push(countSub);
      }
    });
  }

  /**
   * üßπ Nettoie toutes les subscriptions actives
   * 
   * CRITIQUE : √âvite les fuites m√©moire et les subscriptions multiples
   */
  private cleanupSubscriptions() {
    console.log(`üßπ Nettoyage de ${this.subscriptions.length} subscriptions...`);
    
    this.subscriptions.forEach(sub => {
      if (sub && !sub.closed) {
        sub.unsubscribe();
      }
    });
    
    this.subscriptions = [];
    console.log('‚úÖ Subscriptions nettoy√©es');
  }

  // ========================================
  // üîÑ ACTIONS UTILISATEUR
  // ========================================

  /**
   * Change d'onglet
   */
  onSegmentChange(event: any) {
    this.selectedSegment.set(event.detail.value);
    console.log('üîÄ Changement d\'onglet:', event.detail.value);
  }

  /**
   * Rafra√Æchit la liste (pull-to-refresh)
   * üÜï VERSION avec nettoyage des anciennes subscriptions
   */
  handleRefresh(event: any) {
    console.log('üîÑ Pull-to-refresh d√©clench√©');
    
    // Nettoie les anciennes subscriptions
    this.cleanupSubscriptions();
    
    // Recharge tout
    this.loadMyEvents();
    
    setTimeout(() => {
      event.target.complete();
      console.log('‚úÖ Refresh termin√©');
    }, 1000);
  }

  /**
   * Navigation vers la cr√©ation d'√©v√©nement
   */
  goToCreateEvent() {
    this.router.navigate(['/events/create']);
  }

  /**
   * Navigation vers le d√©tail d'un √©v√©nement
   */
  goToEventDetail(eventId: string) {
    this.router.navigate(['/events', eventId]);
  }

  // ========================================
  // üé® HELPERS D'AFFICHAGE
  // ========================================

  /**
   * Retourne le nombre de participants pour un √©v√©nement
   */
  getParticipantCount(eventId: string): number {
    return this.participantCounts.get(eventId) || 0;
  }

  /**
   * V√©rifie si un √©v√©nement est complet
   */
  isEventFull(event: Event): boolean {
    const count = this.getParticipantCount(event.id!);
    return count >= event.maxParticipants;
  }

  /**
   * Retourne la couleur du badge participants
   */
  getParticipantBadgeColor(event: Event): string {
    if (this.isEventFull(event)) {
      return 'danger';
    }
    
    const count = this.getParticipantCount(event.id!);
    const percentage = (count / event.maxParticipants) * 100;
    
    if (percentage >= 80) {
      return 'warning';
    }
    
    return 'success';
  }

  /**
   * Formate la date pour l'affichage
   */
  formatDate(timestamp: any): string {
    if (!timestamp) return '';
    
    const date = timestamp.toDate();
    const options: Intl.DateTimeFormatOptions = {
      weekday: 'short',
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    };
    
    return date.toLocaleDateString('fr-FR', options);
  }

  /**
   * Retourne le libell√© de la cat√©gorie
   */
  getCategoryLabel(category: EventCategory): string {
    const labels: Record<EventCategory, string> = {
      [EventCategory.PARTY]: 'üéâ Soir√©e',
      [EventCategory.CONCERT]: 'üéµ Concert',
      [EventCategory.FESTIVAL]: 'üé™ Festival',
      [EventCategory.BAR]: 'üç∫ Bar',
      [EventCategory.CLUB]: 'üíÉ Club',
      [EventCategory.OUTDOOR]: 'üå≥ Ext√©rieur',
      [EventCategory.PRIVATE]: 'üîí Priv√©',
      [EventCategory.OTHER]: 'üìå Autre'
    };
    return labels[category] || category;
  }

  /**
   * Retourne la couleur de la cat√©gorie
   */
  getCategoryColor(category: EventCategory): string {
    const colors: Record<EventCategory, string> = {
      [EventCategory.PARTY]: 'primary',
      [EventCategory.CONCERT]: 'secondary',
      [EventCategory.FESTIVAL]: 'tertiary',
      [EventCategory.BAR]: 'warning',
      [EventCategory.CLUB]: 'danger',
      [EventCategory.OUTDOOR]: 'success',
      [EventCategory.PRIVATE]: 'medium',
      [EventCategory.OTHER]: 'dark'
    };
    return colors[category] || 'medium';
  }
}

// ========================================
// üìö GUIDE : CYCLE DE VIE IONIC
// ========================================

/*
üîÑ ORDRE D'EX√âCUTION DES HOOKS IONIC :

1Ô∏è‚É£ PREMI√àRE VISITE DE LA PAGE :
   ngOnInit() 
   ‚Üí ionViewWillEnter() 
   ‚Üí ionViewDidEnter()

2Ô∏è‚É£ NAVIGATION VERS UNE AUTRE PAGE :
   ionViewWillLeave() 
   ‚Üí ionViewDidLeave()

3Ô∏è‚É£ RETOUR SUR LA PAGE (depuis le cache) :
   ionViewWillEnter() 
   ‚Üí ionViewDidEnter()
   
   ‚ö†Ô∏è ngOnInit() N'EST PAS RAPPEL√â !

4Ô∏è‚É£ DESTRUCTION DE LA PAGE (rare) :
   ngOnDestroy()

üìù BONNES PRATIQUES :

‚úÖ Utiliser ionViewWillEnter() pour :
   - Recharger les donn√©es √† chaque visite
   - Mettre √† jour l'UI avec les derni√®res infos
   - S'abonner aux Observables

‚úÖ Utiliser ionViewWillLeave() pour :
   - Nettoyer les subscriptions
   - Sauvegarder l'√©tat si n√©cessaire
   - √âviter les fuites m√©moire

‚úÖ Utiliser ngOnDestroy() comme filet de s√©curit√© :
   - Cleanup final des ressources
   - Rarement appel√© en Ionic (mise en cache)

‚ùå √Ä √âVITER :
   - Ne PAS compter uniquement sur ngOnInit() pour charger les donn√©es
   - Ne PAS oublier de nettoyer les subscriptions
   - Ne PAS cr√©er de nouvelles subscriptions sans nettoyer les anciennes

üéØ R√âSULTAT :
   Les donn√©es sont toujours √† jour quand tu reviens sur la page !

‚ö†Ô∏è SWITCHMAP VS COMBINELATEST :

‚ùå combineLatestWith() - PROBL√àME :
   - √âmet seulement quand LES DEUX sources √©mettent ensemble
   - Peut manquer des changements si une source √©met seule
   - Ne garantit pas la r√©activit√© compl√®te

‚úÖ switchMap() - SOLUTION :
   - √Ä chaque changement de participations, annule l'ancienne subscription
   - Cr√©e une NOUVELLE subscription aux √©v√©nements
   - Garantit que les donn√©es sont toujours fra√Æches
   - Flux : participations changent ‚Üí nouvelles requ√™tes √©v√©nements ‚Üí filtrage ‚Üí UI mise √† jou

EXEMPLE DU FLUX AVEC SWITCHMAP :
1. Tu quittes un √©v√©nement
2. Firestore supprime le document participant
3. getParticipationsByUser() d√©tecte le changement et √©met la nouvelle liste
4. switchMap() annule l'ancienne subscription √† getAllEvents()
5. switchMap() cr√©e une nouvelle subscription √† getAllEvents()
6. Les √©v√©nements sont filtr√©s avec les nouvelles participations
7. L'UI est mise √† jour automatiquement ! ‚ú®
*/