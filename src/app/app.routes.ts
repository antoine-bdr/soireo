// src/app/app.routes.ts
// Configuration de toutes les routes de l'application

import { Routes } from '@angular/router';
import { authGuard, noAuthGuard } from './core/guards/auth-guard';

/**
 * üîß ORDRE DES ROUTES - TR√àS IMPORTANT !
 * 
 * Angular v√©rifie les routes dans l'ordre de d√©claration.
 * R√®gles √† respecter :
 * 1. Routes statiques AVANT routes avec param√®tres
 * 2. Routes sp√©cifiques AVANT routes g√©n√©riques
 * 3. Wildcard (**) TOUJOURS EN DERNIER
 * 
 * ‚úÖ BON :  'events/create' ‚Üí 'events/:id' ‚Üí 'events' ‚Üí '**'
 * ‚ùå MAUVAIS : '**' ‚Üí 'events/create' (jamais atteinte !)
 */

export const routes: Routes = [
  // ========================================
  // REDIRECTION PAR D√âFAUT
  // ========================================
  {
    path: '',
    redirectTo: 'login',
    pathMatch: 'full'
  },

  // ========================================
  // ROUTES PUBLIQUES (non prot√©g√©es)
  // ========================================
  {
    path: 'login',
    loadComponent: () => import('./features/auth/login/login.page').then(m => m.LoginPage),
    canActivate: [noAuthGuard] // Redirige vers /home si d√©j√† connect√©
  },
  {
    path: 'register',
    loadComponent: () => import('./features/auth/register/register.page').then(m => m.RegisterPage),
    canActivate: [noAuthGuard]
  },

  // ========================================
  // ROUTES PROT√âG√âES (n√©cessitent authentification)
  // ========================================
  
  // Page d'accueil
  {
    path: 'home',
    loadComponent: () => import('./features/home/home.page').then(m => m.HomePage),
    canActivate: [authGuard]
  },

  {
    path: 'profile',
    loadComponent: () => import('./features/profile/profile.page').then(m => m.ProfilePage),
    canActivate: [authGuard]
  },

  // ========================================
  // ROUTES √âV√âNEMENTS (ordre CRITIQUE)
  // ========================================
  
  // ‚ö†Ô∏è Routes statiques AVANT routes avec param√®tres
  
  // 1Ô∏è‚É£ Route statique : Cr√©ation d'√©v√©nement
  {
    path: 'events/create',
    loadComponent: () => import('./features/events/event-create/event-create.page').then(m => m.EventCreatePage),
    canActivate: [authGuard]
  },

  // 2Ô∏è‚É£ Route avec param√®tre : √âdition
  {
    path: 'events/:id/edit',
    loadComponent: () => import('./features/events/event-edit/event-edit.page').then(m => m.EventEditPage),
    canActivate: [authGuard]
  },

  // 3Ô∏è‚É£ Route avec param√®tre : D√©tail
  {
    path: 'events/:id',
    loadComponent: () => import('./features/events/event-detail/event-detail.page').then(m => m.EventDetailPage),
    canActivate: [authGuard]
  },

  // 4Ô∏è‚É£ Route base : Liste des √©v√©nements
  {
    path: 'events',
    loadComponent: () => import('./features/events/event-list/event-list.page').then(m => m.EventListPage),
    canActivate: [authGuard]
  },

  // ========================================
  // üÜï ROUTE MES √âV√âNEMENTS (Sprint 3)
  // ========================================
  {
    path: 'my-events',
    loadComponent: () => import('./features/events/my-events/my-events.page').then(m => m.MyEventsPage),
    canActivate: [authGuard]
  },

  // ========================================
  // ROUTES FUTURES (comment√©es)
  // ========================================
  /*
  {
    path: 'map',
    loadComponent: () => import('./features/map/map.page').then(m => m.MapPage),
    canActivate: [authGuard]
  },
  {
    path: 'chat/:eventId',
    loadComponent: () => import('./features/chat/chat.page').then(m => m.ChatPage),
    canActivate: [authGuard]
  },
  */

  // ========================================
  // ‚ö†Ô∏è ROUTE WILDCARD - TOUJOURS EN DERNIER
  // ========================================
  // Cette route capture TOUTES les URLs non match√©es
  // Elle DOIT √™tre la derni√®re route du tableau
  {
    path: '**',
    redirectTo: 'login'
  }
];