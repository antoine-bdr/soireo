// storage.rules - VERSION CORRIGÉE
// Règles de sécurité Firebase Storage pour l'application d'événements
// À déployer avec : firebase deploy --only storage

rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // ========================================
    // FONCTIONS UTILITAIRES
    // ========================================
    
    /**
     * Vérifie si l'utilisateur est authentifié
     */
    function isAuthenticated() {
      return request.auth != null;
    }
    
    /**
     * Vérifie si l'utilisateur est le propriétaire
     */
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    /**
     * Vérifie si le fichier est une image valide
     */
    function isValidImage() {
      return request.resource != null 
        && request.resource.contentType != null
        && request.resource.contentType.matches('image/.*');
    }
    
    /**
     * Vérifie si le fichier est un format d'image autorisé
     */
    function isAllowedImageFormat() {
      return request.resource.contentType in [
        'image/jpeg',
        'image/jpg', 
        'image/png',
        'image/gif',
        'image/webp'
      ];
    }
    
    /**
     * Vérifie la taille du fichier (en bytes)
     */
    function isBelowMaxSize(maxSizeInMB) {
      return request.resource.size < maxSizeInMB * 1024 * 1024;
    }
    
    /**
     * ✅ NOUVELLE FONCTION : Vérifie si l'utilisateur est l'organisateur de l'événement
     * Attention : Cette fonction nécessite que l'événement existe déjà dans Firestore
     * Pour la création d'événement, ne pas utiliser cette fonction
     */
    function isEventOrganizer(eventId) {
      return isAuthenticated() 
        && firestore.exists(/databases/(default)/documents/events/$(eventId))
        && firestore.get(/databases/(default)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
    }
    
    // ========================================
    // IMAGES D'ÉVÉNEMENTS - CRÉATION
    // Path: /events/{filename}
    // ✅ RÈGLE CORRIGÉE : Upload direct dans /events/
    // ========================================
    
    match /events/{imageFile} {
      
      // LECTURE : Tout le monde peut voir les images d'événements (publiques)
      // Les images sont utilisées dans les cards de l'app
      allow read: if true;
      
      // CRÉATION : Tout utilisateur authentifié peut uploader une image
      // ✅ Pas de vérification d'organisateur car l'événement n'existe pas encore
      // La sécurité est assurée par les contraintes de format et taille
      // + validation côté Firestore lors de la création de l'événement
      allow create: if isAuthenticated()
        && isValidImage()
        && isAllowedImageFormat()
        && isBelowMaxSize(5); // Max 5MB pour les images d'événements
      
      // MISE À JOUR : Seul un utilisateur authentifié peut modifier
      // Note : Idéalement, on voudrait vérifier l'ownership, mais c'est complexe
      // car le nom du fichier ne contient pas l'eventId
      allow update: if isAuthenticated()
        && isValidImage()
        && isAllowedImageFormat()
        && isBelowMaxSize(5);
      
      // SUPPRESSION : Seul un utilisateur authentifié peut supprimer
      // Note : La vraie sécurité de suppression sera gérée côté application
      allow delete: if isAuthenticated();
    }
    
    // ========================================
    // IMAGES D'ÉVÉNEMENTS - STRUCTURE AVEC EVENTID
    // Path: /events/{eventId}/{imageFile}
    // ✅ RÈGLE BONUS : Si tu veux migrer vers une structure avec eventId
    // ========================================
    
    match /events/{eventId}/{imageFile} {
      
      // LECTURE : Tout le monde peut voir les images d'événements
      allow read: if true;
      
      // CRÉATION/MISE À JOUR : Seul l'organisateur peut uploader/modifier l'image
      // ✅ Cette règle fonctionne car l'événement existe déjà dans Firestore
      allow write: if isEventOrganizer(eventId)
        && isValidImage()
        && isAllowedImageFormat()
        && isBelowMaxSize(5);
      
      // SUPPRESSION : Seul l'organisateur peut supprimer l'image
      allow delete: if isEventOrganizer(eventId);
    }
    
    // ========================================
    // AVATARS UTILISATEURS
    // Path: /users/{userId}/{avatarFile}
    // ========================================
    
    match /users/{userId}/{avatarFile} {
      
      // LECTURE : Tout le monde peut voir les avatars (publiques)
      // Les avatars sont utilisés dans les profils et listes de participants
      allow read: if true;
      
      // CRÉATION/MISE À JOUR : Seul le propriétaire peut uploader/modifier son avatar
      allow write: if isOwner(userId)
        && isValidImage()
        && isAllowedImageFormat()
        && isBelowMaxSize(2); // Max 2MB pour les avatars
      
      // SUPPRESSION : Seul le propriétaire peut supprimer son avatar
      allow delete: if isOwner(userId);
    }
    
    // ========================================
    // RÈGLE PAR DÉFAUT : INTERDIRE TOUT LE RESTE
    // ========================================
    
    // Tout autre chemin non explicitement autorisé est interdit
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
